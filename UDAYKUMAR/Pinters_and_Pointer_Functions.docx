Pointers & Function Pointers:

1. What is a pointer in C++?
   - A pointer in C++ is a variable that stores the memory address of another variable. It allows direct access to the memory location where the data is stored.

2. How do you declare a pointer in C++?
   - To declare a pointer in C++, you use an asterisk (*) before the pointer variable name, followed by the data type it points to.
   
      int* ptr; // Declares an integer pointer
      double* ptr2; // Declares a double pointer

3. What is the purpose of using pointers in C++?
   - Pointers are used to manage dynamic memory, pass addresses of variables to functions (instead of passing large data), and facilitate more efficient manipulation of data structures.

4. How do you initialize a pointer in C++?
   - You can initialize a pointer to the address of another variable or use the `nullptr` keyword to initialize it to a null pointer.
   

      int x = 10;
      int* ptr = &x; // Initializes ptr to the address of x
      int* ptr2 = nullptr; // Initializes ptr2 to a null pointer
   

5. What is a null pointer in C++?
   - A null pointer is a pointer that doesn't point to any valid memory location. It is represented by the `nullptr` keyword in C++. Dereferencing a null pointer leads to undefined behavior.


6. What is the difference between a pointer and a reference in C++?
   - Pointers can be reassigned to point to different memory locations, while references are bound to the same object throughout their lifetime.
   - Pointers can be null (point to nothing), while references must always refer to a valid object.
   - Pointers require dereferencing (*ptr) to access the value, while references are used directly (no need for dereferencing).

7. How do you dereference a pointer in C++?
   - Dereferencing a pointer means accessing the value it points to. You use the asterisk (*) operator before the pointer variable to dereference it.

      int x = 10;
      int* ptr = &x; // ptr points to the address of x
      
      // Dereferencing the pointer to access the value
      int value = *ptr; // value will be 10


8. What is the concept of pointer arithmetic in C++?
   - Pointer arithmetic allows you to perform arithmetic operations on pointers. When you add an integer value to a pointer, it moves to the memory location corresponding to that index (in terms of the pointer's data type).

9. Write a C++ program to swap two integers using pointers.

   #include <iostream>
   
   void swap(int* a, int* b) {
       int temp = *a;
       *a = *b;
       *b = temp;
   }
   
   int main() {
       int x = 5, y = 10;
       std::cout << "Before swapping: x = " << x << ", y = " << y << std::endl;
       swap(&x, &y);
       std::cout << "After swapping: x = " << x << ", y = " << y << std::endl;
       return 0;
   }



10. What are "const" pointers and "const" pointed values?
    - A "const" pointer means the pointer itself cannot be reassigned to point to another memory location. It is declared using `const` before the asterisk (*).
    - A "const" pointed value means the value being pointed to cannot be modified using the pointer. It is declared using `const` after the asterisk (*).
    
      int x = 10;
      int y = 20;
      
      // "const" pointer to an integer
      const int* ptr = &x; // Cannot modify the value of x through ptr
      
      // Pointer to a "const" integer
      int* const ptr2 = &x; // Cannot reassign ptr2 to point to another variable
      
      // "const" pointer to a "const" integer
      const int* const ptr3 = &x; // Both pointer and pointed value are "const"

11. Explain the concept of dynamic memory allocation using pointers in C++?
    - Dynamic memory allocation allows you to allocate memory for variables during program execution using the `new` operator. It returns a pointer to the allocated memory, and you must use pointers to access the memory.

      int* ptr = new int; // Dynamically allocate memory for an integer
      *ptr = 42; // Store value 42 in the allocated memory
      delete ptr; // Deallocate the memory when no longer needed


12. What is a memory leak? How can you avoid it?
    - A memory leak occurs when dynamically allocated memory is not deallocated after it is no longer needed, leading to a gradual reduction of available memory in the program. To avoid memory leaks, always use `delete` to deallocate dynamically allocated memory when it is no longer needed.


13. What is a function pointer in C++?
   - A function pointer in C++ is a pointer that points to the address of a function. It allows you to invoke a function indirectly through the pointer.

14. How do you declare a function pointer in C++?
   - To declare a function pointer, you use the function's return type followed by an asterisk (*) and the pointer name, along with the parameter list in parentheses.

      // Example function pointer to a function taking two integers and returning an integer
      int (*ptr)(int, int);


15. How do you initialize and use a function pointer in C++?
   - Function pointers can be initialized to point to an existing function or to a lambda function. To use a function pointer, you need to dereference it and call it like a regular function.
   
      #include <iostream>
      
      int add(int a, int b) {
          return a + b;
      }
      
      int main() {
          // Initialize function pointer to the 'add' function
          int (*ptr)(int, int) = add;
          
          // Use the function pointer to call the 'add' function
          int result = (*ptr)(2, 3); // Equivalent to 'add(2, 3)'
          
          std::cout << "Result: " << result << std::endl;
          
          return 0;
      }
 
4. Can you use a function pointer to call a member function of a class?
   - Yes, you can use a function pointer to call a member function of a class. However, since member functions have an implicit `this` pointer, you need to use a special syntax with the `&ClassName::FunctionName` notation for non-static member functions.
   
      #include <iostream>
      
      class MyClass {
      public:
          void show() {
              std::cout << "Hello from MyClass!" << std::endl;
          }
      };
      
      int main() {
          void (MyClass::*ptr)() = &MyClass::show;
          
          MyClass obj;
          (obj.*ptr)(); // Equivalent to 'obj.show()'
          
          return 0;
      }


5. What is the use of function pointers in C++?
   - Function pointers are used to implement callbacks and dynamic dispatch. They allow you to select and call functions at runtime, which is beneficial when you want to vary the behavior of a program based on certain conditions.

6.Can a function pointer point to multiple functions at different times?
   - Yes, a function pointer can be reassigned to point to different functions at different times during the program's execution. This provides flexibility in choosing which function to call dynamically.

7. What happens if a function pointer is not initialized before use?
   - If a function pointer is not initialized before use, it contains an indeterminate value (garbage value). Attempting to call the function through an uninitialized function pointer results in undefined behavior.

8. Write a C++ program to implement a simple callback using function pointers.

   #include <iostream>
   
   void callbackFunction(int x) {
       std::cout << "Callback function called with argument: " << x << std::endl;
   }
   
   void doSomething(int value, void (*callback)(int)) {
       std::cout << "Doing something with value: " << value << std::endl;
       callback(value);
   }
   
   int main() {
       doSomething(42, callbackFunction);
       return 0;
   }



9. How do you pass a function pointer as a parameter to another function?
   - To pass a function pointer as a parameter to another function, you define the function parameter with the appropriate function pointer type.
   
      #include <iostream>
      
      int add(int a, int b) {
          return a + b;
      }
      
      int subtract(int a, int b) {
          return a - b;
      }
      
      int performOperation(int (*operation)(int, int), int x, int y) {
          return operation(x, y);
      }
      
      int main() {
          int resultAdd = performOperation(add, 5, 3);
          int resultSubtract = performOperation(subtract, 8, 2);
          
          std::cout << "Addition result: " << resultAdd << std::endl;
          std::cout << "Subtraction result: " << resultSubtract << std::endl;
          
          return 0;
      }

